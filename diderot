#!/usr/bin/env python3.6
''' a script for uploading tar files directly to Diderot.
USE AT YOUR OWN RISK (This is completely unofficial and the consequences of bugs are unknown. I
assume no responsibility for late assignments, corrupted files, or anything that comes as a result
of this script!

William Paivine
bill@paivine.com
'''
import sys
assert sys.version_info >= (3,6), 'Python3.6 is required'
import getpass
import shutil
import os.path
import importlib


requests_spec = importlib.util.find_spec('requests')
if requests_spec is None:
    print('Requests library not found!')
    if str(input('Should I install it to your local user (y/n)?')) == 'y':
        import os
        os.system('pip3 install --user requests')
    else:
        print('You can install it locally on andrew linux with:')
        print('pip3 install --user requests')
        exit()
import requests

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

GREEN_PLUS = bcolors.OKGREEN + '+' + bcolors.ENDC
WARNING = bcolors.WARNING + '=' + bcolors.ENDC
RED_MINUS = bcolors.FAIL + 'X' + bcolors.ENDC

HELP = {'help': 'displays this help message',
        'login (<email>)': 'connects to Diderot and logs in. Uses andrew email by default.',
        'ls': 'lists detected assignments',
        'submit <#> (filename)': 'submits file `filename` to homework # (given by ls). If'
                                 'filename is supplied as a command line argument, `filename` may be omitted',
        'quit': 'quits the cli',
        'logout': 'logs out of Diderot',
        'status': 'displays the current status',
        'refresh': 'refreshes internal assignment list',
        'download <#>': 'downloads the handout for assignment number #'}

def build_help_msg(d):
    length = max([len(k) for k in d]) + 4
    msg = ''
    for k in d:
        msg += k.ljust(length) + d[k] + '\n'
    return msg

HELP_TEXT = build_help_msg(HELP)

C15210 = 2
C15251 = 3
C15859B = 4

def download_file(url):
    local_filename = url.split('/')[-1]
    if os.path.isfile(local_filename):
        print('There is already a file called {}, so I won\'t download a new one.'
              ' Rename the old one and please try again'.format(local_filename))
        return False

    print('Trying to download file to {}'.format(local_filename))

    r = requests.get(url, stream=True)
    with open(local_filename, 'wb') as f:
        shutil.copyfileobj(r.raw, f)

    return local_filename

class Diderot:
    def __init__(self,
                 class_code=None,
                 filename=None,
                 url='https://www.diderot.one/courses/',
                 login_url='https://www.diderot.one/login/login/?next=/courses/',
                 logout_url='https://www.diderot.one/login/logout/',
                 assignments_url='https://www.diderot.one/code-homeworks/?course_pk={}',
                 assignment_url='https://www.diderot.one/code-homeworks/view-code-homework/?hw_pk={}',
                 submission_url='https://www.diderot.one/code-homeworks/view-code-homework/?hw_pk={}'):

        if class_code is None:
            self.class_code = C15210
        self.filename = filename
        self.url = url
        self.post_url = login_url
        self.logout_url = logout_url
        self.assignments_url = assignments_url
        self.assignment_url = assignment_url
        self.submission_url = submission_url
        self.connected = False
        self.logged_in = False
        self.assignments = {}
        if sys.stdin.isatty():
            self.repl()
        else:
            self.login()

    def repl(self):
        self.running = True
        while self.running:
            if self.connected:
                if self.logged_in:
                    status = GREEN_PLUS
                else:
                    status = WARNING
            else:
                status = RED_MINUS
            try:
                cmd = str(input('Diderot ({}) > '.format(status))).lower()
            except EOFError:
                print()
                exit()
            except KeyboardInterrupt:
                print()
                continue
            self.cmd = cmd
            if cmd == 'q' or cmd == 'quit':
                self.running = False
            elif cmd.startswith('login'):
                args = cmd.split(' ')
                if len(args) < 2:
                    self.login(prompt_email=False)
                else:
                    email = args[1]
                    self.login(prompt_email=False, email=email)
                self.fetch_assignments()
            elif cmd == 'help' or cmd == 'h':
                print(HELP_TEXT)
            elif cmd == 'logout':
                self.logout()
            elif cmd == 'ls':
                self.list_assignments()
            elif cmd == 'refresh':
                self.fetch_assignments()
            elif cmd.startswith('submit'):
                args = cmd.split(' ')
                if self.filename is None and len(args) < 3:
                    print('Incorrect number of arguments for `submit`')
                elif len(args) < 2:
                    print('Incorrectly formatted `submit` command.')
                else:
                    if self.filename and len(args) < 3:
                        filename = self.filename
                    else:
                        filename = args[2]
                    hw_number = args[1]
                    self.submit(hw_number, filename)
            elif cmd == 'status':
                if self.connected:
                    print('Connected to Diderot.')
                    if self.logged_in:
                        print('Currently logged in as {}'.format(self.user))
                    else:
                        print('Not currently logged in')
                else:
                    print('No connection to Diderot.')
            elif cmd.startswith('download'):
                args = cmd.split(' ')
                if len(args) < 2:
                    print('Incorrectly formatted `download` command.')
                else:
                    hw_number = args[1]
                    self.download(hw_number)
            elif cmd == '':
                pass
            else:
                print('Unrecognized command "{}". Try "help"'.format(cmd))

    def download(self, hw_number):
        if not self.check_logged_in():
            return False
        url = self.submission_url.format(hw_number)
        r = self.client.get(url)
        if r.status_code != 200:
            print('Error retreiving submission page, aborting download.')
            return False

        download_url = r.text.split('Download Handout')[0].split('<a href')[-1].split('"')[1]
        # super gross html parsing, don't actually do stuff like this (this is bad code!)
        if download_file(download_url):
            print('Download successful!')
        else:
            print('Download unsuccessful.')



    def check_logged_in(self):
        cmd = self.cmd.split(' ')[0]
        if not self.connected:
            print('Cannot {} if not connected.'.format(cmd))
            return False
        if not self.logged_in:
            print('Cannot {} if not logged in.'.format(cmd))
            return False
        return True

    def fetch_assignments(self):
        if not self.check_logged_in():
            return False
        hw_number = 1
        self.assignments = {}
        found_homework = True
        while found_homework or hw_number < 10:
            response = self.client.get(self.assignment_url.format(hw_number))
            if response.status_code == 200:
                hw_name = response.text.split('codehomework-breadcrumb')[1].split('</h3')[0].split('>')[-1]
                try:
                    due_date = response.text.split('Due: ')[1].split('</h4>')[0]
                except:
                    pass
                # this try except is hyper-gross... This function is basically a hack,
                # don't ever do anything like this for anything that is real or matters!
                # In all seriousness, though, these lines above are the most likely thing to break,
                # since they actually "parse" response html... sorry for hurting your eyes :'(
                self.assignments[hw_number] = '{} ({})'.format(hw_name, due_date)
                found_homework = True
            else:
                found_homework = False
            hw_number += 1

    def list_assignments(self):
        for i, name in self.assignments.items():
            print('[{}] : {}'.format(i, name))


    def logout(self):
        if not self.check_logged_in():
            return False
        self.client.get(self.logout_url)
        self.logged_in = False
        print('Successfully logged out of Diderot.')
        return True
    def login(self, prompt_email=False, email=None):
        if sys.stdin.isatty():
            print('Please enter your diderot.one login credentials (blank to abort).')
            if prompt_email:
                email = str(input('Email: '))
            elif email is None:
                email = '{}@andrew.cmu.edu'.format(getpass.getuser())
                print('Email: {}'.format(email))
            self.user = email
            password = getpass.getpass()
        else:
            email = sys.stdin.readline().replace('\n','').replace('\r','')
            password = sys.stdin.readline().replace('\n','').replace('\r','')

        if email == '' or password == '':
            print('Login aborted!')
            return False
        if not self.connect():
            self.logged_in = False
            return False

        login_data = {'username': email,
                      'password': password,
                      'csrfmiddlewaretoken': self.csrftoken,
                      'next': '/courses/'}
        assert self.connected, 'Can\'t login if not yet connected to Diderot!'

        r = self.client.post(self.post_url, data=login_data)
        if len(r.history) > 0:
            code = r.history[0].status_code
        else:
            code = r.status_code
        if not code == 302:
            if code == 404:
                print('Error! Login post returned 404!')
            elif code >= 500:
                print('Server failed to fulfill request on login, gave code {}'.format(code))
            elif code == 200:
                print('Authentication failed. Perhaps your credentials were incorrect.')
            else:
                print('Got HTTP code {} from server on login'.format(code))
            self.logged_in = False
            return False
        self.csrftoken = self.client.cookies['csrftoken']
        print('Successfully logged in to Diderot!')
        self.logged_in = True
        return True

    def connect(self):
        self.client = requests.session()
        main_page = self.client.get(self.url)
        code = main_page.status_code
        if not code == 200:
            if code == 404:
                print('Error! Main page returned 404!')
            elif code >= 500:
                print('Server failed to fulfill request for main page, gave code {}'.format(code))
            else:
                print('Got HTTP code {} from server on main page'.format(code))
            self.connected = False
            return False

        self.csrftoken = self.client.cookies['csrftoken']
        self.connected = True
        return True

    def submit(self, hw_number, filename):
        if not self.check_logged_in():
            return False
        if not int(hw_number) in self.assignments:
            print('Invalid homework number {}'.format(hw_number))
            return False
        if int(hw_number) != max(self.assignments.keys()):
            if str(input('It seems that homework {} is not the most recent assignment.\n'
                         'Submit to it anyway, though this could result in late penalties? (type'
                         ' "yes" to continue, no to abort):\n'.format(hw_number))) != 'yes':
                print('Submission aborted')
                return False
            else:
                print('Submission continued.')

        print('Submitting {} to assignment: {}'.format(filename,
            self.assignments[int(hw_number)]))
        url = self.submission_url.format(hw_number)
        r = self.client.get(url)
        if r.status_code != 200:
            print('Error retreiving submission page, aborting submission!')
            return False

        headers = {'X-CSRFToken':self.csrftoken}

        response = self.client.post(url, headers=headers, files={'submission':open(filename, 'rb')})

        if response.status_code == 200:
            print('Submission appears successful. You still may want to check that diderot'
            ' accepted your submission (and whether it compiles) in your browser.\nI think the'
            ' url can be found here:\n{}'.format(url))
            return True
        else:
            print('Something went wrong with submission, I got error code {}. It is'
            'unlikely your submission was accepted.'.format(response.status_code))
            return False
if __name__ == '__main__':
    if len(sys.argv) > 1:
        filename = sys.argv[1]
    else:
        filename = None
    app = Diderot(class_code=C15210, filename=filename)

