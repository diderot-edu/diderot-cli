#!/usr/bin/env python3

'''
Initial script written by William Paivine (bill@paivine.com).

Updated/Maintined by Rohan Yadav (rohany@alumni.cmu.edu)
'''

import cmd

import sys
assert sys.version_info >= (3,6), 'Python3.6 is required'
import getpass
import shutil
import os.path

import api_calls

import importlib
from importlib import util


# TODO (rohany): remove this import logic, just say that we require
# the requests package. It seems tricky to install it and stuff.
# Or at least, it didn't work for me on my local computer.
requests_spec = importlib.util.find_spec('requests')
if requests_spec is None:
    print('Requests library not found!')
    if str(input('Should I install it to your local user (y/n)?')) == 'y':
        import os
        os.system('pip3 install --user requests')
    else:
        print('You can install it locally on andrew linux with:')
        print('pip3 install --user requests')
        exit()
import requests

class DiderotCLI(cmd.Cmd):

    prompt = "DiderotCLI >> "

    def cmdloop(self, url):
        self.url = url
        self.api_client = api_calls.DiderotAPIInterface(url)
        self.logged_in = False

        # TODO (rohany): This ctrl + c catching is a bit hacky,
        # I wonder if there is a better/more principled way to do this.
        while True:
            try:
                return cmd.Cmd.cmdloop(self, intro=None)
            except KeyboardInterrupt:
                print("^C")
    
    def preloop(self):
        if self.logged_in:
            return True
        
        username = str(input('Username: '))
        password = getpass.getpass()

        if username == '' or password == '':
            print('Login aborted!')
            return False

        if not self.api_client.login(username, password):
            sys.exit(0)

        self.logged_in = True
    
    def do_list_courses(self, line):
        result = self.api_client.list_all_courses()
        if result is None:
            print("Error retrieving all courses.")
        else:
            print("\t".join([c['label'] for c in result]))

    def help_list_courses(self):
        print("Usage: list_courses")
        print("List all courses.")


    # TODO (rohany): error handling here!
    def do_list_assignments(self, course):
        # Parse the course info.
        if not course:
            print("Provide a course (number or label). list_assignments [course]")
        else:
            # TODO (rohany): verify that we are given a value course object.
            result = self.api_client.list_assignments(course)
            if result is None:
                print("Error retrieving all assignments.")
            else:
                print("\t".join([hw['name'] for hw in result]))

    def help_list_assignments(self):
        print("Usage: list_assignments [course]")
        print("List all assignments for a course.")


    def do_download_assignment(self, args):
        # TODO (rohany): perform better parsing of arguments
        args = args.split(" ")
        self.api_client.download_assignment(args[0], args[1])

    def help_download_assignment(self):
        print("Usage: download_assignment [course] [assignment]")
        print("Download handout materials for an assignment.")


    def do_submit_assignment(self, args):
        # TODO (rohany): perform better parsing of arguments
        args = args.split(" ")
        success, res_url = self.api_client.submit_assignment(args[0], args[1], args[2])
        if success:
            print("Assignment submitted successfully. Track your submission's status at the following url: {}".format(res_url))
        else:
            # TODO: have more descriptive error messages here.
            print("Something went wrong. Please try submitting on the Diderot website at: {}".format(self.url))
    
    def help_submit_assignment(self, args):
        print("Usage: submit_assignment [course] [assignment] [path to handin file]")
        print("Submit handin to Diderot for an assignment")


    def do_quit(self, line):
        sys.exit(0)
    
    def help_quit(self):
        pass

    def do_exit(self, line):
        sys.exit(0)
    
    def help_exit(self):
        pass

    def do_EOF(self, line):
        return True

    def help_EOF(self):
        pass

    # def submit(self, hw_number, filename):
    #     if not self.check_logged_in():
    #         return False
    #     if not int(hw_number) in self.assignments:
    #         print('Invalid homework number {}'.format(hw_number))
    #         return False
    #     if int(hw_number) != max(self.assignments.keys()):
    #         if str(input('It seems that homework {} is not the most recent assignment.\n'
    #                      'Submit to it anyway, though this could result in late penalties? (type'
    #                      ' "yes" to continue, no to abort):\n'.format(hw_number))) != 'yes':
    #             print('Submission aborted')
    #             return False
    #         else:
    #             print('Submission continued.')

    #     print('Submitting {} to assignment: {}'.format(filename,
    #         self.assignments[int(hw_number)]))
    #     url = self.submission_url.format(hw_number)
    #     r = self.client.get(url)
    #     if r.status_code != 200:
    #         print('Error retreiving submission page, aborting submission!')
    #         return False

    #     headers = {'X-CSRFToken':self.csrftoken}

    #     response = self.client.post(url, headers=headers, files={'submission':open(filename, 'rb')})

    #     if response.status_code == 200:
    #         print('Submission appears successful. You still may want to check that diderot'
    #         ' accepted your submission (and whether it compiles) in your browser.\nI think the'
    #         ' url can be found here:\n{}'.format(url))
    #         return True
    #     else:
    #         print('Something went wrong with submission, I got error code {}. It is'
    #         'unlikely your submission was accepted.'.format(response.status_code))
    #         return False


if __name__ == '__main__':
    if len(sys.argv) > 1:
        # TODO: get rid of this ability from the student accessible version.
        DiderotCLI().cmdloop(sys.argv[1])
    else:
        DiderotCLI().cmdloop("http://www.diderot.one")

